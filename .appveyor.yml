shallow_clone: true

# We're currently only testing 64-bit libffi built with Microsoft's
# tools.
# This matrix should be expanded to include at least:
#  32- and 64-bit gcc/cygwin
#  32- and 64-bit gcc/mingw
#  32- and 64-bit clang/mingw
#  and perhaps more.

image: Visual Studio 2019 Preview
platform:
  # - x64
  # - x86
  - arm

environment:
  global:
    CYG_ROOT: C:/cygwin
    CYG_CACHE: C:/cygwin/var/cache/setup
    CYG_MIRROR: http://mirrors.kernel.org/sourceware/cygwin/
  matrix:
    - VSVER: 15

install:
  - ps: >-
      If ($env:Platform -Match "x86") {
          $env:VCVARS_PLATFORM="x86"
          $env:BUILD="i686-pc-cygwin"
          $env:HOST="i686-pc-cygwin"
          $env:ASSEMBLER=""
          $env:SRC_ARCHITECTURE="x86"
        } ElseIf ($env:Platform -Match "arm") {
          $env:VCVARS_PLATFORM="x86_arm"
          $env:BUILD="arm-pc-cygwin"
          $env:HOST="i686-pc-cygwin"
          $env:ASSEMBLER="-marm"
          $env:SRC_ARCHITECTURE="x86"
        } Else {
          $env:VCVARS_PLATFORM="amd64"
          $env:BUILD="x86_64-w64-cygwin"
          $env:HOST="x86_64-w64-cygwin"
          $env:ASSEMBLER="-m64"
          $env:SRC_ARCHITECTURE="arm"
      }
  - 'appveyor DownloadFile https://cygwin.com/setup-x86.exe -FileName setup.exe'
  - 'setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P dejagnu >NUL'
  - '%CYG_ROOT%/bin/bash -lc "cygcheck -dc cygwin"'
  - echo call VsDevCmd to set VS150COMNTOOLS
  - call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat"
  - ps: $env:VSCOMNTOOLS=(Get-Content ("env:VS" + "$env:VSVER" + "0COMNTOOLS"))
  - echo "Using Visual Studio %VSVER%.0 at %VSCOMNTOOLS%"
  - call "%VSCOMNTOOLS%..\..\vc\Auxiliary\Build\vcvarsall.bat" %VCVARS_PLATFORM%
  - set > set.txt
  # - cmd: >-
  #     set GET_MSVCC=%SH% -lc "cd $OLDPWD; export MSVCC=`/usr/bin/find $PWD -name msvcc.sh`; echo ${MSVCC};"
  #     FOR /F "usebackq delims==" %%i IN (`%GET_MSVCC%`) do @set MSVCC=%%i
  #     echo %MSVCC%

build_script:
  - c:\cygwin\bin\sh -lc "cd $OLDPWD; printenv|sort > printenv.txt"
  - c:\cygwin\bin\sh -lc "(cd $OLDPWD; ./autogen.sh;)"
  - echo %MSVCC%
  - set GET_MSVCC=%SH% -lc "cd $OLDPWD; export MSVCC=`/usr/bin/find $PWD -name msvcc.sh`; echo ${MSVCC};" & FOR /F "usebackq delims==" %%i IN (`%GET_MSVCC%`) do @set MSVCC=%%i &
c:\cygwin\bin\sh -lc "(cd $OLDPWD; ./configure CC='%MSVCC% %ASSEMBLER%' CXX='%MSVCC% %ASSEMBLER%' LD='link' CPP='cl -nologo -EP' CXXCPP='cl -nologo -EP' CPPFLAGS='-DFFI_BUILDING_DLL' AR='/cygdrive/c/projects/libffi/.travis/ar-lib lib' NM='dumpbin -symbols' STRIP=':' --build=$BUILD --host=$HOST;)" & exit 0
  # - c:\cygwin\bin\sh -lc "(cd $OLDPWD; MSVCC_SH=`find $PWD -name msvcc.sh`; export MSVCC=\"$MSVCC_SH $ASSEMBLER\"; printenv|sort>msvcc.txt; ./configure CC=\'\"$MSVCC\"\' CXX=\'\"$MSVCC\"\' LD='link' CPP='cl -nologo -EP' CXXCPP='cl -nologo -EP' CPPFLAGS='-DFFI_BUILDING_DLL' AR='/cygdrive/c/projects/libffi/.travis/ar-lib lib' NM='dumpbin -symbols' STRIP=':' --build=$BUILD --host=$HOST;)" & exit 0
  - c:\cygwin\bin\sh -lc "(cd $OLDPWD; cp src/%SRC_ARCHITECTURE%/ffitarget.h include; make; find .;)" & exit 0
  # - c:\cygwin\bin\sh -lc "(cd $OLDPWD; cp `find . -name 'libffi-?.dll'` $HOST/testsuite/; make check; cat `find ./ -name libffi.log`)"

# FIXME: "make check" currently fails.  It just looks like msvcc needs
# to learn about -L and -l options.  If you add "make check; cat `find
# ./ -name libffi.log" to the end of that build command you'll see
# what I mean.

after_build:
  - ps: dir -Path $env:APPVEYOR_BUILD_FOLDER\* -include config.log -Recurse | %{write-host $_.FullName}
  - ps: dir -Path $env:APPVEYOR_BUILD_FOLDER\* -include config.log -Recurse | %{7z a config.zip $_.FullName}

  # - ps: try{ dir -Path $env:APPVEYOR_BUILD_FOLDER\* -include libffi-7.dll -Recurse | Resolve-Path $_ -Relative| %{7z a libffi.zip $_}}catch{} ; exit 0
  # - ps: dir -Path $env:APPVEYOR_BUILD_FOLDER\* -include libffi-7.lib -Recurse | Resolve-Path $_ -Relative| %{7z a libffi.zip $_} ; exit 0
  # - ps: dir -Path $env:APPVEYOR_BUILD_FOLDER\* -include fficonfig.h -Recurse | Resolve-Path $_ -Relative| %{7z a libffi.zip $_}  ; exit 0
  # - ps: dir -Path $env:APPVEYOR_BUILD_FOLDER\* -include ffi.h -Recurse | Resolve-Path $_ -Relative| %{7z a libffi.zip $_}        ; exit 0
  # - ps: dir -Path .\* -recurse -include ffitarget.h | Resolve-Path -Relative | ?{$_ -inotmatch "src"} | %{7z a libffi.zip $_}    ; exit 0

artifacts:
  - path: config.zip
  - path: libffi.zip
  - path: printenv.txt
  - path: msvcc.txt
  - path: i686-pc-cygwin\config.log
  - path: x86_64-w64-cygwin\config.log
  - path: arm-pc-cygwin\config.log
  - path: set.txt