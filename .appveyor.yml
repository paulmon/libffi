shallow_clone: true

# We're currently only testing 64-bit libffi built with Microsoft's
# tools.
# This matrix should be expanded to include at least:
#  32- and 64-bit gcc/cygwin
#  32- and 64-bit gcc/mingw
#  32- and 64-bit clang/mingw
#  and perhaps more.

image: Visual Studio 2019 Preview
platform:
  - arm

environment:
  global:
    CYG_ROOT: C:/cygwin
    CYG_CACHE: C:/cygwin/var/cache/setup
    CYG_MIRROR: http://mirrors.kernel.org/sourceware/cygwin/
  matrix:
    - VSVER: 15

install:
  - ps: >-
      If ($env:Platform -Match "x86") {
          $env:VCVARS_PLATFORM="x86"
          $env:BUILD="i686-pc-cygwin"
          $env:HOST="i686-pc-cygwin"
          $env:ASSEMBLER=""
          $env:SRC_ARCHITECTURE="x86"
        } ElseIf ($env:Platform -Match "arm") {
          $env:VCVARS_PLATFORM="x86_arm"
          $env:BUILD="arm-pc-cygwin"
          $env:HOST="i686-pc-cygwin"
          $env:ASSEMBLER="-marm"
          $env:SRC_ARCHITECTURE="x86"
        } Else {
          $env:VCVARS_PLATFORM="amd64"
          $env:BUILD="x86_64-w64-cygwin"
          $env:HOST="x86_64-w64-cygwin"
          $env:ASSEMBLER="-m64"
          $env:SRC_ARCHITECTURE="arm"
      }
  - 'appveyor DownloadFile https://cygwin.com/setup-x86.exe -FileName setup.exe'
  - 'setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P dejagnu >NUL'
  - '%CYG_ROOT%/bin/bash -lc "cygcheck -dc cygwin"'
  - echo call VsDevCmd to set VS150COMNTOOLS
  - call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat"
  - ps: $env:VSCOMNTOOLS=(Get-Content ("env:VS" + "$env:VSVER" + "0COMNTOOLS"))
  - echo "Using Visual Studio %VSVER%.0 at %VSCOMNTOOLS%"
  - call "%VSCOMNTOOLS%..\..\vc\Auxiliary\Build\vcvarsall.bat" %VCVARS_PLATFORM%
  # - where cl.exe
  # - set | findstr -i arm & exit 0
  # - echo begin path
  # - set & exit 0
  # - echo end path
  # - findstr -sipc:"usr.local.bin..usr.bin" %CYG_ROOT%\* & exit 0

build_script:
  # - md c:\projects\libffi\home & exit 0
  # - copy c:\cygwin\home\appveyor\* c:\projects\libffi\home
  # - dir c:\projects\libffi\home /s/b & exit 0
  # - ps: c:\cygwin\bin\sh -lc 'echo "PATH=$PATH"'
  # - ps: c:\cygwin\bin\sh -lc 'echo "cd ~;echo "PWD=$PWD"'
  - c:\cygwin\bin\sh -lc "(cd $OLDPWD; ./autogen.sh;)"
  - c:\cygwin\bin\sh -lc "(cd $OLDPWD; ./configure CC='/cygdrive/c/projects/libffi/msvcc.sh %ASSEMBLER%' CXX='/cygdrive/c/projects/libffi/msvcc.sh %ASSEMBLER%' LD='link' CPP='cl -nologo -EP' CXXCPP='cl -nologo -EP' CPPFLAGS='-DFFI_BUILDING_DLL' AR='/cygdrive/c/projects/libffi/.travis/ar-lib lib' NM='dumpbin -symbols' STRIP=':' --build=$BUILD --host=$HOST;)"
  - c:\cygwin\bin\sh -lc "(cd $OLDPWD; cp src/%SRC_ARCHITECTURE%/ffitarget.h include; make; find .;)"
  - c:\cygwin\bin\sh -lc "(cd $OLDPWD; cp `find . -name 'libffi-?.dll'` $HOST/testsuite/; make check; cat `find ./ -name libffi.log`)"

# FIXME: "make check" currently fails.  It just looks like msvcc needs
# to learn about -L and -l options.  If you add "make check; cat `find
# ./ -name libffi.log" to the end of that build command you'll see
# what I mean.

#after_build:
#  - 7z a home.zip c:\cygwin\home\appveyor\*

#artifacts:
#  - path: home.zip

#    name: home_files
#    type: zip

  # - path: arm-pc-cygwin
  #   name: arm artifacts
  #   type: zip
  